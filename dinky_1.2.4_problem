1. 使用dinky_1.2.4版本，Ambari平台,核心组件版本：yarn-3.1.0、hdfs-3.1.0，flink版本1.19.1，实时开发平台提交作业后checkpoint提示失败
  1.1 jobmanger.log显示错误日志guava包Platform类缺失方法
  1.2 研究发现是dinky_1.2.4自带的依赖包dinky-app-1.19-1.2.4-jar-with-dependencies.jar使用的guava包版本过高，而Ambari的大数据包使用的guava版本比较低
  1.3 flink运行时读取了Ambari大数据环境的依赖包，里面使用了Platform类，但是读取的guava包版本来自dinky，不是原本需要的guava版本
  1.4 找到dinky github仓库，根据官网的操作指引排除guava包后，重新编译打包dinky-app-1.19-1.2.4-jar-with-dependencies.jar，再放到dinky平台的依赖路径上


2. 作业JAR包和集群内Flink的JAR包存在冲突
  2.1 该问题发生时，您一般可以在作业日志中看到类似报错NoSuchFieldError/NoSuchMethodError/ClassNotFoundException等。您可以通过以下步骤排查和解决：
  2.2 定位引起冲突的依赖类。根据报错中的异常类，您可以找到该类所在的依赖JAR，然后在作业JAR的pom.xml所在目录运行mvn dependency:tree查看依赖树，判断该类是如何被引入的。
      排除引起冲突的依赖类。
  2.3 如果是在pom.xml中错误设置了JAR包的Scope，则可以修改Scope为Provided来将对应JAR包排除。
  2.4 如果确实需要使用该异常类所在的JAR，则可通过添加Exclude来排除特定类。
  2.5 如果确实需要使用该异常类，无法更换为集群内对应版本的类，可以通过Maven Shade Plugin对该类进行Shade。
  2.6 此外，如果Classpath中存在多个版本的JAR包，作业实际使用的Class版本和类的加载顺序有关，为了确认某个类具体是从哪个JAR加载而来，可以在flink-conf.yaml中设置JVM参数           env.java.opts: -verbose:class或者通过指定动态参数-Denv.java.opts="-verbose:class"来打印加载的类及其来源。

  2.7 说明-对于JobManager或TaskManager来说，上述信息会打印到jobmanager.out或taskmanager.out中。
